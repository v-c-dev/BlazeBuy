@page "/cart"
@using BlazeBuy.Extensions.Cart
@using BlazeBuy.Models
@using BlazeBuy.Models.Enums
@using BlazeBuy.Services
@using BlazeBuy.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject IProductService _productService
@inject ICategoryService _categoryService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject IOrderService _orderService
@inject IShoppingCartService _cartService
@inject SharedStateService _sharedStateService
@inject PaymentService _paymentService


<PageTitle>Shopping Cart</PageTitle>

@if (IsProcessing)
{
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap">
        <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Success"
                                   Size="ProgressBarCircularSize.Large"
                                   Value="100" ShowValue="false"
                                   Mode="ProgressBarMode.Indeterminate" />
    </RadzenStack>
}
else
{
    @if (shoppingCart.Any())
    {
        <div class="row w-100">
            <div class="col-lg-6 col-12">
                <div class="container p-4 m-2">
                    <h4 class="text-center text-success display-6">
                        Cart Summary
                    </h4>

                    @foreach (var item in shoppingCart)
                    {
                        <div class="d-flex p-2 m-2">
                            <div class="card flex-row w-100">
                                <img class="card-img-left" style="width: 120px; height: 80px; margin-top: 30px" src="@(item.Product.ImageUrl ?? "/images/default.png")">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h4 class="">
                                            @item.Product.Name
                                        </h4>
                                        <h4>
                                            @item.Product.Price
                                        </h4>
                                    </div>
                                    <div class="flex-fill">
                                        <h4 class="text-danger">
                                            @((item.Product.Price * item.Quantity).ToString());
                                        </h4>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="d-flex justify-content-between g-0">
                                            <span @onclick="() => UpdateCartItem(item.ProductId, -1)">
                                                <i class="bi bi-dash-circle-fill btn text-secondary"></i>
                                            </span>
                                            <span class="ml-1 me-1">
                                                <b class="lead">@item.Quantity</b>
                                            </span>
                                            <span @onclick="() => UpdateCartItem(item.ProductId, +1)">
                                                <i class="bi bi-plus-circle-fill btn text-secondary"></i>
                                            </span>
                                        </div>
                                        <button class="btn btn-danger" @onclick="() => UpdateCartItem(item.ProductId, -item.Quantity)">Remove</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>
            <div class="col-lg-6 col-12 p-4">
                <div class="card">
                    <div class="card-header text-success text-center display-6">
                        Pickup Details
                    </div>
                    <EditForm Model="order" FormName="CartForm" OnValidSubmit="ProcessOrderCreation">
                        <DataAnnotationsValidator />
                        <div class="card-body">

                            <div class="card-body">
                                <div class="form-group">
                                    <label>Name</label>
                                    <InputText @bind-Value="order.Name" type="text" class="form-control" />
                                    <ValidationMessage For="@(() => order.Name)" />
                                </div>
                                <div class="form-group">
                                    <label>Email</label>
                                    <InputText @bind-Value="order.Email" type="email" class="form-control" />
                                    <ValidationMessage For="@(() => order.Email)" />
                                </div>
                                <div class="form-group">
                                    <label>Phone</label>
                                    <InputText @bind-Value="order.PhoneNumber" type="text" class="form-control" />
                                    <ValidationMessage For="@(() => order.PhoneNumber)" />
                                </div>
                            </div>

                            <div class="card mt-4 bg-light">
                                <div class="card-body">
                                    <h4>
                                        Grand Total: @order.Total
                                    </h4>
                                    <h4>
                                        No. of Items: @TotalItems
                                    </h4>
                                </div>

                            </div>
                        </div>

                        <button class="btn btn-success m-4">
                            Looks Good? Place Order!
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="p-4">
            <div class="alert alert-warning">
                <h4 class="text-center text-danger display-6">
                    No items in the cart!
                </h4>
            </div>
        </div>
    }
}

@code {
    private IEnumerable<ShoppingCart> shoppingCart = new List<ShoppingCart>();
    public bool IsProcessing { get; set; } = true;

    [SupplyParameterFromForm]
    public Order order { get; set; } = new Order();
    private int TotalItems { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        order.Email = user.FindFirst(u => u.Type.Contains("emailaddress"))?.Value;
        order.UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        order.Status = OrderStatus.Pending;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCart();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadCart()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        shoppingCart = await _cartService.GetCartAsync(user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value);

        order.Total = 0;
        TotalItems = 0;
        foreach (var item in shoppingCart)
        {
            order.Total += (item.Product.Price * Convert.ToDecimal(item.Quantity));
            TotalItems += item.Quantity;
        }
        order.Total = Math.Round(order.Total, 2);
    }

    private async Task UpdateCartItem(int productId, int updateBy)
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var result = await _cartService.UpdateCartAsync(order.UserId, productId, updateBy);

        await _sharedStateService.RefreshAsync(order.UserId);

        if (result)
        {
            if (updateBy > 0)
            {
                _jsRuntime?.ToastrSuccess("Product added to cart successfully");
            }
            else if (updateBy < 0)
            {
                _jsRuntime?.ToastrSuccess("Product removed from cart successfully");
            }
        }
        else
        {
            _jsRuntime?.ToastrError("Error encountered");
        }

        await LoadCart();
    }

    private async Task ProcessOrderCreation()
    {
        IsProcessing = true;
        try
        {
            await Task.Yield();
            order.Items = CartExtensions.ToOrderItems(shoppingCart.ToList());

            var session = _paymentService.CreateStripeCheckoutSession(order);
            order.SessionId = session.Id;
            await _orderService.CreateOrderAsync(order);
            _navigationManager.NavigateTo(session.Url);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            throw;
        }
    }
}