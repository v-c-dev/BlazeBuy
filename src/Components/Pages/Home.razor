@page "/"
@using BlazeBuy.Models
@using BlazeBuy.Services
@using BlazeBuy.Services.Interfaces

@rendermode InteractiveServer

@inject IProductService _productService
@inject ICategoryService _categoryService
@inject IShoppingCartService _shoppingCartService
@inject IJSRuntime _jsRuntime

@inject SharedStateService _shared
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager

<PageTitle>Home</PageTitle>

@if (IsProcessing)
{
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap">
        <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Success"
                                   Size="ProgressBarCircularSize.Large"
                                   Value="100" ShowValue="false" 
                                   Mode="ProgressBarMode.Indeterminate" />
    </RadzenStack>
}
else
{
    <div class="container-fluid px-0 m-0 full-width">
        <div class="jumbotron-custom">
            <div class="m-auto d-flex align-items-center" style="width: 400px; height: 50vh;">

                <div class="d-flex align-items-center" style="width: 100%;">
                    <input type="text" class="form-control rounded-pill"
                           @bind:event="oninput" @bind:get="SearchInput" @bind:set="FilterProductsByName"
                           placeholder="Search for Food Items!"
                           style="width: 100%; padding: 20px;">
                    <span style="position: relative; left: -43px;"><i class="bi bi-search"></i></span>
                </div>
            </div>
        </div>

        <div class="content px-4 m-2">
            <ul class="nav nav-underline justify-content-center mb-2">
                <li class="nav-item">
                    <span class="nav-link @GetActiveTabClass(0)" href="#" style="cursor: pointer" @onclick="() => FilterProductsById(0)">All</span>
                </li>
                @foreach (var cat in Categories)
                {
                    <li class="nav-item">
                        <span class="nav-link @GetActiveTabClass(cat.Id)" href="#" style="cursor: pointer" @onclick="() => FilterProductsById(cat.Id)">@cat.Name</span>
                    </li>
                }
            </ul>
            <div class="row mt-4 mx-1">
                @foreach (var prod in FilteredProducts)
                {
                    <div class="col-12 col-md-6 col-lg-4 pe-3 mb-5">
                        <div class="card">
                            <div class="mt-3 mb-2 row">
                                <div class="col-6 px-3">
                                    @if (!string.IsNullOrEmpty(prod.SpecialTag))
                                    {
                                        <i class="bi bi-star btn btn-outline-success disabled">@prod.SpecialTag</i>
                                    }
                                </div>
                                <div class="col-6 text-end text-danger h4 px-3">
                                    @prod.Price
                                </div>
                            </div>
                            <div class="text-center">
                                <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="@(prod.ImageUrl != null ? prod.ImageUrl : "images/default.png")" style="">
                            </div>
                            <div class="card-body">
                                <h5 class="card-title text-center lead text-success">@prod.Name</h5>
                                <p class="card-text mt-2">@((MarkupString)@prod.Description)</p>
                                <h4 class="text-center">
                                    <div class="m-lg-auto p-2" @onclick="() => AddToCartAsync(prod)">
                                        <i class="bi bi-cart3 btn btn-success text-right  px-5 form-control"> Add to cart</i>
                                    </div>

                                </h4>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}


@code{
    public bool IsProcessing { get; set; } = true;
    public IEnumerable<Product> Products = new List<Product>();
    public IEnumerable<Category> Categories = new List<Category>();
    public IEnumerable<Product> FilteredProducts = new List<Product>();

    public int SelectedCategoryId = 0;
    public string SearchInput = "";


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(2000);
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProducts()
    {
        Products = await _productService.GetAllProductsAsync();
        Categories = await _categoryService.GetAllCategoriesAsync();
        FilterProductsById(0);
    }

    private void FilterProductsById(int categoryId)
    {
        if (categoryId == 0)
        {
            FilteredProducts = Products;
            SelectedCategoryId = categoryId;
        }
        else
        {
            FilteredProducts = Products.Where(p => p.CategoryId == categoryId).ToList();
            SelectedCategoryId = categoryId;
            SearchInput = string.Empty;
        }
    }

    private void FilterProductsByName(string searchInput)
    {
        if (string.IsNullOrWhiteSpace(searchInput))
        {
            FilteredProducts = Products;
        }
        else
        {
            FilteredProducts = Products
                .Where(p => p.Name.Contains(searchInput, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        SearchInput = searchInput;
    }

    private string GetActiveTabClass(int categoryId)
    {
        return SelectedCategoryId == categoryId ? "active" : string.Empty;
    }

    private async Task AddToCartAsync(Product product)
    {
        var auth = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;

        if (!(user.Identity?.IsAuthenticated ?? false))
        {
            _navigationManager.NavigateTo("/account/login");
            return;
        }

        var userId = user.FindFirst("sub")?.Value
                     ?? user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        await _shoppingCartService.AddCartItemAsync(userId!, product.Id, 1);

        // option to avoid another query
        // _shared.Bump(+1);

        // re-query DB for total
        await _shared.RefreshAsync(userId!);

        await _jsRuntime.ToastrSuccess("Product added to cart!");
    }
}