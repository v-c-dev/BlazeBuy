@page "/coupons"
@rendermode InteractiveServer

@using BlazeBuy.Models
@using BlazeBuy.Services.Interfaces
@using Microsoft.AspNetCore.Authorization

@inject ICouponService _couponService
@inject IJSRuntime _js
@inject NavigationManager _navigationManager

@attribute [Authorize]

<ConfirmModal onModalConfirmed="DeleteConfirmed"
              Title="Are you sure you want to delete this coupon?"
              BtnStyle="btn-danger"
              BtnText="Delete" />

<PageTitle>Coupons</PageTitle>

@if (IsProcessing)
{
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap">
        <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Success"
                                   Size="ProgressBarCircularSize.Large"
                                   Value="100" ShowValue="false"
                                   Mode="ProgressBarMode.Indeterminate" />
    </RadzenStack>
}
else
{
    <RadzenCard class="rz-my-12 rz-mx-auto" Style="max-width:100vw; max-height:100vh; overflow:auto;">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
            <RadzenText TextStyle="TextStyle.H1"><strong>Coupon list</strong></RadzenText>
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End"
                     class="rz-mb-2 rz-px-4">
            <RadzenButton Text="Add new" Icon="add_circle" ButtonStyle="ButtonStyle.Primary"
                          Click="@(() => _navigationManager.NavigateTo("/coupons/create"))" />
        </RadzenStack>

        <RadzenCard class="rz-shadow-0 rz-border-radius-0 rz-p-8"
                    style="margin:1rem calc(-1*var(--rz-card-padding));">

            @if (Coupons.Any())
            {
                <div style="overflow-x:auto;">
                    <RadzenDataGrid Data="@Coupons" AllowFiltering="true" AllowSorting="true" 
                                    AllowPaging="true" PageSize="10" ColumnWidth="150px"
                                    style="min-width:940px; overflow:auto;">
                        <Columns>
                            <RadzenDataGridColumn Property="Code" Title="Code" Width="100px"/>
                            <RadzenDataGridColumn Property="Scope" Title="Scope" Width="100px"/>
                            <RadzenDataGridColumn Property="Type" Title="Type" Width="100px"/>
                            <RadzenDataGridColumn Property="Value" Title="Value"  
                                                  Width="110px" FormatString="{0:N2}" />
                            <RadzenDataGridColumn Property="MinimumOrderTotal" Title="Min Total"
                                                  Width="110px" 
                                                  FormatString="{0:C}" />
                            <RadzenDataGridColumn Property="ExpiresAt" Title="Expires" Width="100px" 
                                                  FormatString="{0:dd-MM-yyyy}" />
                            <RadzenDataGridColumn Property="IsActive" Title="Active" Width="80px" 
                                                  TextAlign="TextAlign.Center" />
                            <RadzenDataGridColumn Title="Actions" Width="100px" Sortable="false" 
                                                  Filterable="false">
                                <Template Context="cpn">
                                    <RadzenButton Icon="edit" Size="ButtonSize.Small"
                                                  Click="@(() => _navigationManager.NavigateTo($"/coupons/update/{cpn.Id}"))"
                                                  Style="margin-right:.5rem;" />
                                    <RadzenButton Icon="delete" Size="ButtonSize.Small"
                                                  ButtonStyle="ButtonStyle.Danger"
                                                  Click="@(() => PromptDelete(cpn.Id))" />
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </div>
            }
        </RadzenCard>
    </RadzenCard>
}

@code {
    private bool IsProcessing { get; set; } = true;
    private List<Coupon> Coupons { get; set; } = new();
    private int _deleteId;

    protected override async Task OnInitializedAsync()
    {
        await LoadCouponsAsync();
        IsProcessing = false;
    }

    private async Task LoadCouponsAsync()
    {
        Coupons = await _couponService.GetAllCouponsAsync();
    }

    private async Task PromptDelete(int id)
    {
        _deleteId = id;
        await _js.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task DeleteConfirmed(bool confirmed)
    {
        if (!confirmed || _deleteId == 0) return;

        await _js.InvokeVoidAsync("HideConfirmationModal");

        IsProcessing = true;
        StateHasChanged();

        try
        {
            bool ok = await _couponService.DeleteCouponAsync(_deleteId);
            if (ok)
                await _js.ToastrSuccess("Coupon deleted successfully");
            else
                await _js.ToastrError("Could not delete coupon");

            _deleteId = 0;
            await LoadCouponsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }

        IsProcessing = false;
    }
}
