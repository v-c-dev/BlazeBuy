@page "/order/confirmation/{sessionId}"
@using BlazeBuy.Models
@using BlazeBuy.Models.Enums
@using BlazeBuy.Services
@using BlazeBuy.Services.Interfaces
@inject IShoppingCartService _cartService
@inject PaymentService _paymentService
@inject SharedStateService _sharedStateService

<PageTitle>Order Confirmation</PageTitle>

@if (IsProcessing)
{
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap">
        <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Success"
                                   Size="ProgressBarCircularSize.Large"
                                   Value="100" ShowValue="false"
                                   Mode="ProgressBarMode.Indeterminate" />
    </RadzenStack>
}
else
{
    <div class="text-center">
        <h1 class="pt-4 text-success">Success</h1>
        <p>Order: <b>@order.Id</b></p>
        <br/>
        <br/>
        <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" fill="#157347" class="bi bi-bag-check" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M10.854 8.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 0 1 .708-.708L7.5 10.793l2.646-2.647a.5.5 0 0 1 .708 0"/>
            <path d="M8 1a2.5 2.5 0 0 1 2.5 2.5V4h-5v-.5A2.5 2.5 0 0 1 8 1m3.5 3v-.5a3.5 3.5 0 1 0-7 0V4H1v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V4zM2 5h12v9a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1z"/>
        </svg>
    </div>
}

@code {
    [Parameter]
    public string sessionId { get; set; }
    public bool IsProcessing { get; set; } = true;
    public Order order { get; set; }

    protected override async Task OnInitializedAsync()
    {
        order = await _paymentService.CheckOrderStatusAndUpdateOrder(sessionId);
        if (order.Status == OrderStatus.Approved)
        {
            await _cartService.ClearCartAsync(order.UserId);
            await _sharedStateService.RefreshAsync(order.UserId);
        }
        IsProcessing = false;
    }

}