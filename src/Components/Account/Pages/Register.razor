@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazeBuy.Data
@using BlazeBuy.Models.Enums

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject RoleManager<IdentityRole> RoleManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<div class="mt-5" style="height: 100%;">
    <div class="h-100 d-flex align-items-center justify-content-center">
        <div class="card bg-light" style="min-width: 28rem;">
            <div class="card-body">
                <h5 class="card-title text-center display-6">Sign Up</h5>

                <StatusMessage Message="@Message" />

                <EditForm Model="Input"
                          asp-route-returnUrl="@ReturnUrl"
                          method="post"
                          OnValidSubmit="RegisterUser"
                          FormName="register">
                    <DataAnnotationsValidator />
                    <hr />
                    <ValidationSummary class="text-danger" role="alert" />

                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email"
                                   id="Input.Email"
                                   class="form-control"
                                   autocomplete="username"
                                   aria-required="true"
                                   placeholder="name@example.com" />
                        <label for="Input.Email" class="form-label">Email</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>

                    <div class="form-floating mb-3">
                        <InputText type="password"
                                   @bind-Value="Input.Password"
                                   id="Input.Password"
                                   class="form-control"
                                   autocomplete="new-password"
                                   aria-required="true"
                                   placeholder="password" />
                        <label for="Input.Password" class="form-label">Password</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>

                    <div class="form-floating mb-3">
                        <InputText type="password"
                                   @bind-Value="Input.ConfirmPassword"
                                   id="Input.ConfirmPassword"
                                   class="form-control"
                                   autocomplete="new-password"
                                   aria-required="true"
                                   placeholder="password" />
                        <label for="Input.ConfirmPassword" class="form-label">Confirm Password</label>
                        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                    </div>

                    <div class="form-floating mb-4">
                        <InputSelect @bind-Value="Input.Role"
                                     id="Input.Role"
                                     class="form-control"
                                     aria-required="true"
                                     placeholder="Role">
                            @foreach (var role in Enum.GetValues(typeof(UserRoles)))
                            {
                                <option value="@role">@role</option>
                            }
                        </InputSelect>
                        <label for="Input.Role" class="form-label">Role</label>
                    </div>

                    <div>
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
                    </div>
                </EditForm>

                <br />

                <ExternalLoginPicker />

                <hr />

                <p class="text-center mt-2">
                    <small class="text-muted">
                        Already have an account?
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Login",
                                                       new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Log in</a>
                    </small>
                </p>
            </div>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        try
        {
            Logger.LogInformation("User created a new account with password.");

            if (!await RoleManager.RoleExistsAsync(UserRoles.Customer.ToString()))
            {
                await RoleManager.CreateAsync(new IdentityRole(UserRoles.Admin.ToString()));
                await RoleManager.CreateAsync(new IdentityRole(UserRoles.Customer.ToString()));
            }
            if (Input.Role is not null)
            {
                await UserManager.AddToRoleAsync(user, Convert.ToString(Input.Role));
            }
            else
            {
                await UserManager.AddToRoleAsync(user, UserRoles.Customer.ToString());
            }

            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

            await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

            // fixed redirect error
            if (UserManager.Options.SignIn.RequireConfirmedAccount)
            {
                var redirectUrl = $"/Account/RegisterConfirmation?email={Input.Email}&returnUrl={ReturnUrl}";
                await InvokeAsync(() => NavigationManager.NavigateTo(redirectUrl, forceLoad: true));
                return;
            }

            await SignInManager.SignInAsync(user, isPersistent: false);
            await InvokeAsync(() => NavigationManager.NavigateTo(ReturnUrl ?? "/", forceLoad: true));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        //[Required]
        [Display(Name = "Role")]
        public UserRoles? Role { get; set; }
    }
}
