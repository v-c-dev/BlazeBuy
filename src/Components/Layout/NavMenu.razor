@using BlazeBuy.Services
@using BlazeBuy.Services.Interfaces
@rendermode InteractiveServer
@implements IDisposable
@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager NavigationManager
@inject SharedStateService _sharedStateService
@inject IShoppingCartService _cartService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazeBuy</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/cart" Match="NavLinkMatch.All">
                <span class="bi bi-cart3-nav-menu" aria-hidden="true"></span>
                Cart @(_sharedStateService.TotalCartCount > 0 ? $"({_sharedStateService.TotalCartCount})" : "")
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/order/list" Match="NavLinkMatch.All">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Orders
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/categories" Match="NavLinkMatch.All">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Categories
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/products" Match="NavLinkMatch.All">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Products
            </NavLink>
        </div>

        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span>
                        @context.User.Identity?.Name
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>

            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/Account/Register" Match="NavLinkMatch.All">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/Account/Login" Match="NavLinkMatch.All">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>

    </nav>
</div>

@code {
    private string? currentUrl;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

        _sharedStateService.CartCountChanged += OnCartCountChanged;

        // fetch initial count once user is known
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        if (!string.IsNullOrWhiteSpace(userId))
            await _sharedStateService.RefreshAsync(userId);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private void OnSharedStateChange()
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnCartCountChanged(int _) => InvokeAsync(StateHasChanged);

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        _sharedStateService.OnStateChange -= OnSharedStateChange;
    }
}
